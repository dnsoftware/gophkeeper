// Code generated by MockGen. DO NOT EDIT.
// Source: internal/server/domain/field/field.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	field "github.com/dnsoftware/gophkeeper/internal/server/domain/field"
	gomock "github.com/golang/mock/gomock"
)

// MockFieldStorage is a mock of FieldStorage interface.
type MockFieldStorage struct {
	ctrl     *gomock.Controller
	recorder *MockFieldStorageMockRecorder
}

// MockFieldStorageMockRecorder is the mock recorder for MockFieldStorage.
type MockFieldStorageMockRecorder struct {
	mock *MockFieldStorage
}

// NewMockFieldStorage creates a new mock instance.
func NewMockFieldStorage(ctrl *gomock.Controller) *MockFieldStorage {
	mock := &MockFieldStorage{ctrl: ctrl}
	mock.recorder = &MockFieldStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFieldStorage) EXPECT() *MockFieldStorageMockRecorder {
	return m.recorder
}

// GetEntityFields mocks base method.
func (m *MockFieldStorage) GetEntityFields(ctx context.Context, etype string) ([]field.EntityFields, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityFields", ctx, etype)
	ret0, _ := ret[0].([]field.EntityFields)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityFields indicates an expected call of GetEntityFields.
func (mr *MockFieldStorageMockRecorder) GetEntityFields(ctx, etype interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityFields", reflect.TypeOf((*MockFieldStorage)(nil).GetEntityFields), ctx, etype)
}

// IsFieldType mocks base method.
func (m *MockFieldStorage) IsFieldType(ctx context.Context, id int32, ftype string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFieldType", ctx, id, ftype)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFieldType indicates an expected call of IsFieldType.
func (mr *MockFieldStorageMockRecorder) IsFieldType(ctx, id, ftype interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFieldType", reflect.TypeOf((*MockFieldStorage)(nil).IsFieldType), ctx, id, ftype)
}
