// Code generated by MockGen. DO NOT EDIT.
// Source: internal/client/domain/client.go

// Package domain is a generated GoMock package.
package domain

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockReadline is a mock of Readline interface.
type MockReadline struct {
	ctrl     *gomock.Controller
	recorder *MockReadlineMockRecorder
}

// MockReadlineMockRecorder is the mock recorder for MockReadline.
type MockReadlineMockRecorder struct {
	mock *MockReadline
}

// NewMockReadline creates a new mock instance.
func NewMockReadline(ctrl *gomock.Controller) *MockReadline {
	mock := &MockReadline{ctrl: ctrl}
	mock.recorder = &MockReadlineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadline) EXPECT() *MockReadlineMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockReadline) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockReadlineMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockReadline)(nil).Close))
}

// GetEtypeName mocks base method.
func (m *MockReadline) GetEtypeName(etype string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEtypeName", etype)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetEtypeName indicates an expected call of GetEtypeName.
func (mr *MockReadlineMockRecorder) GetEtypeName(etype interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEtypeName", reflect.TypeOf((*MockReadline)(nil).GetEtypeName), etype)
}

// GetField mocks base method.
func (m *MockReadline) GetField(fieldID int32) *Field {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetField", fieldID)
	ret0, _ := ret[0].(*Field)
	return ret0
}

// GetField indicates an expected call of GetField.
func (mr *MockReadlineMockRecorder) GetField(fieldID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetField", reflect.TypeOf((*MockReadline)(nil).GetField), fieldID)
}

// GetFieldsGroup mocks base method.
func (m *MockReadline) GetFieldsGroup(etype string) []*Field {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFieldsGroup", etype)
	ret0, _ := ret[0].([]*Field)
	return ret0
}

// GetFieldsGroup indicates an expected call of GetFieldsGroup.
func (mr *MockReadlineMockRecorder) GetFieldsGroup(etype interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFieldsGroup", reflect.TypeOf((*MockReadline)(nil).GetFieldsGroup), etype)
}

// Login mocks base method.
func (m *MockReadline) Login() (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Login indicates an expected call of Login.
func (mr *MockReadlineMockRecorder) Login() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockReadline)(nil).Login))
}

// MakeFieldsDescription mocks base method.
func (m *MockReadline) MakeFieldsDescription(fields []*Field) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MakeFieldsDescription", fields)
}

// MakeFieldsDescription indicates an expected call of MakeFieldsDescription.
func (mr *MockReadlineMockRecorder) MakeFieldsDescription(fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeFieldsDescription", reflect.TypeOf((*MockReadline)(nil).MakeFieldsDescription), fields)
}

// Registration mocks base method.
func (m *MockReadline) Registration() (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Registration")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Registration indicates an expected call of Registration.
func (mr *MockReadlineMockRecorder) Registration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Registration", reflect.TypeOf((*MockReadline)(nil).Registration))
}

// SetEtypeName mocks base method.
func (m *MockReadline) SetEtypeName(etype, name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEtypeName", etype, name)
}

// SetEtypeName indicates an expected call of SetEtypeName.
func (mr *MockReadlineMockRecorder) SetEtypeName(etype, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEtypeName", reflect.TypeOf((*MockReadline)(nil).SetEtypeName), etype, name)
}

// Stderr mocks base method.
func (m *MockReadline) Stderr() io.Writer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stderr")
	ret0, _ := ret[0].(io.Writer)
	return ret0
}

// Stderr indicates an expected call of Stderr.
func (mr *MockReadlineMockRecorder) Stderr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stderr", reflect.TypeOf((*MockReadline)(nil).Stderr))
}

// Writeln mocks base method.
func (m *MockReadline) Writeln(str string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Writeln", str)
}

// Writeln indicates an expected call of Writeln.
func (mr *MockReadlineMockRecorder) Writeln(str interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Writeln", reflect.TypeOf((*MockReadline)(nil).Writeln), str)
}

// edit mocks base method.
func (m *MockReadline) edit(prompt, what, validateRules, validateMessages string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "edit", prompt, what, validateRules, validateMessages)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// edit indicates an expected call of edit.
func (mr *MockReadlineMockRecorder) edit(prompt, what, validateRules, validateMessages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "edit", reflect.TypeOf((*MockReadline)(nil).edit), prompt, what, validateRules, validateMessages)
}

// input mocks base method.
func (m *MockReadline) input(prompt, validateRules, validateMessages string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "input", prompt, validateRules, validateMessages)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// input indicates an expected call of input.
func (mr *MockReadlineMockRecorder) input(prompt, validateRules, validateMessages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "input", reflect.TypeOf((*MockReadline)(nil).input), prompt, validateRules, validateMessages)
}

// interrupt mocks base method.
func (m *MockReadline) interrupt(line string, err error) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "interrupt", line, err)
	ret0, _ := ret[0].(string)
	return ret0
}

// interrupt indicates an expected call of interrupt.
func (mr *MockReadlineMockRecorder) interrupt(line, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "interrupt", reflect.TypeOf((*MockReadline)(nil).interrupt), line, err)
}

// MockSender is a mock of Sender interface.
type MockSender struct {
	ctrl     *gomock.Controller
	recorder *MockSenderMockRecorder
}

// MockSenderMockRecorder is the mock recorder for MockSender.
type MockSenderMockRecorder struct {
	mock *MockSender
}

// NewMockSender creates a new mock instance.
func NewMockSender(ctrl *gomock.Controller) *MockSender {
	mock := &MockSender{ctrl: ctrl}
	mock.recorder = &MockSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSender) EXPECT() *MockSenderMockRecorder {
	return m.recorder
}

// AddEntity mocks base method.
func (m *MockSender) AddEntity(ae Entity) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEntity", ae)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddEntity indicates an expected call of AddEntity.
func (mr *MockSenderMockRecorder) AddEntity(ae interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEntity", reflect.TypeOf((*MockSender)(nil).AddEntity), ae)
}

// DeleteEntity mocks base method.
func (m *MockSender) DeleteEntity(id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntity", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEntity indicates an expected call of DeleteEntity.
func (mr *MockSenderMockRecorder) DeleteEntity(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntity", reflect.TypeOf((*MockSender)(nil).DeleteEntity), id)
}

// DownloadBinary mocks base method.
func (m *MockSender) DownloadBinary(entityId int32, fileName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadBinary", entityId, fileName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadBinary indicates an expected call of DownloadBinary.
func (mr *MockSenderMockRecorder) DownloadBinary(entityId, fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadBinary", reflect.TypeOf((*MockSender)(nil).DownloadBinary), entityId, fileName)
}

// DownloadCryptoBinary mocks base method.
func (m *MockSender) DownloadCryptoBinary(entityId int32, fileName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadCryptoBinary", entityId, fileName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadCryptoBinary indicates an expected call of DownloadCryptoBinary.
func (mr *MockSenderMockRecorder) DownloadCryptoBinary(entityId, fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadCryptoBinary", reflect.TypeOf((*MockSender)(nil).DownloadCryptoBinary), entityId, fileName)
}

// Entity mocks base method.
func (m *MockSender) Entity(id int32) (*Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Entity", id)
	ret0, _ := ret[0].(*Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Entity indicates an expected call of Entity.
func (mr *MockSenderMockRecorder) Entity(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Entity", reflect.TypeOf((*MockSender)(nil).Entity), id)
}

// EntityCodes mocks base method.
func (m *MockSender) EntityCodes() ([]*EntityCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EntityCodes")
	ret0, _ := ret[0].([]*EntityCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EntityCodes indicates an expected call of EntityCodes.
func (mr *MockSenderMockRecorder) EntityCodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EntityCodes", reflect.TypeOf((*MockSender)(nil).EntityCodes))
}

// EntityList mocks base method.
func (m *MockSender) EntityList(etype string) (map[int32]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EntityList", etype)
	ret0, _ := ret[0].(map[int32]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EntityList indicates an expected call of EntityList.
func (mr *MockSenderMockRecorder) EntityList(etype interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EntityList", reflect.TypeOf((*MockSender)(nil).EntityList), etype)
}

// Fields mocks base method.
func (m *MockSender) Fields(etype string) ([]*Field, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fields", etype)
	ret0, _ := ret[0].([]*Field)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fields indicates an expected call of Fields.
func (mr *MockSenderMockRecorder) Fields(etype interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fields", reflect.TypeOf((*MockSender)(nil).Fields), etype)
}

// Login mocks base method.
func (m *MockSender) Login(login, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", login, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockSenderMockRecorder) Login(login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockSender)(nil).Login), login, password)
}

// Registration mocks base method.
func (m *MockSender) Registration(login, password, password2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Registration", login, password, password2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Registration indicates an expected call of Registration.
func (mr *MockSenderMockRecorder) Registration(login, password, password2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Registration", reflect.TypeOf((*MockSender)(nil).Registration), login, password, password2)
}

// SaveEntity mocks base method.
func (m *MockSender) SaveEntity(ae Entity) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveEntity", ae)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveEntity indicates an expected call of SaveEntity.
func (mr *MockSenderMockRecorder) SaveEntity(ae interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEntity", reflect.TypeOf((*MockSender)(nil).SaveEntity), ae)
}

// UploadBinary mocks base method.
func (m *MockSender) UploadBinary(entityId int32, file string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadBinary", entityId, file)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadBinary indicates an expected call of UploadBinary.
func (mr *MockSenderMockRecorder) UploadBinary(entityId, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadBinary", reflect.TypeOf((*MockSender)(nil).UploadBinary), entityId, file)
}

// UploadCryptoBinary mocks base method.
func (m *MockSender) UploadCryptoBinary(entityId int32, file string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadCryptoBinary", entityId, file)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadCryptoBinary indicates an expected call of UploadCryptoBinary.
func (mr *MockSenderMockRecorder) UploadCryptoBinary(entityId, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadCryptoBinary", reflect.TypeOf((*MockSender)(nil).UploadCryptoBinary), entityId, file)
}
